
block_GUID = 'c0cf84'
checker_GUID = 'ed90ce'

deck_GUID = '301e95'

die1_GUID = '197209'
die2_GUID = '5e540b'
die3_GUID = 'a9545a'
die4_GUID = '4fd345'
die5_GUID = 'ad5a9d'
die6_GUID = 'd04b38'

scoringZone_GUID = '9c0582'
drawZone_GUID = '9c940c'
discardZone_GUID = '947020'
rollingZone_GUID = '134972'

button1_parameters = {}
button1_parameters.click_function = 'rollDiceButton'
button1_parameters.function_owner = nil
button1_parameters.label = 'Roll Dice'
button1_parameters.position = {0,0.8,0}
button1_parameters.rotation = {0,0,0}
button1_parameters.width = 1000
button1_parameters.height = 500
button1_parameters.font_size = 200

combinedButton_parameters = {}
combinedButton_parameters.click_function = 'drawButton'
combinedButton_parameters.function_owner = nil
combinedButton_parameters.label = 'Draw Card'
combinedButton_parameters.position = {0,0.8,0}
combinedButton_parameters.rotation = {0,0,0}
combinedButton_parameters.width = 800
combinedButton_parameters.height = 500
combinedButton_parameters.color = {1, 0, 0}
combinedButton_parameters.font_size = 100
combinedButton_parameters.font_color = {255 ,255, 255}

continueTurnButton_parameters = {}
continueTurnButton_parameters.click_function = 'continueTurnButton'
continueTurnButton_parameters.function_owner = nil
continueTurnButton_parameters.label = 'Continue Turn \n & \n Draw Another Card'
continueTurnButton_parameters.position = {0,0.8,0}
continueTurnButton_parameters.rotation = {0,0,0}
continueTurnButton_parameters.width = 2200
continueTurnButton_parameters.height = 1000
continueTurnButton_parameters.font_size = 300

--START GLOBAL API EVENT SECTION--
function onLoad()
    block = getObjectFromGUID(block_GUID)
    checker = getObjectFromGUID(checker_GUID)
    block.createButton(combinedButton_parameters)

    die1 = getObjectFromGUID(die1_GUID)
    die2 = getObjectFromGUID(die2_GUID)
    die3 = getObjectFromGUID(die3_GUID)
    die4 = getObjectFromGUID(die4_GUID)
    die5 = getObjectFromGUID(die5_GUID)
    die6 = getObjectFromGUID(die6_GUID)

    die1.bounciness = 0.75
    die2.bounciness = 0.75
    die3.bounciness = 0.75
    die4.bounciness = 0.75
    die5.bounciness = 0.75
    die6.bounciness = 0.75

    dice = {die1, die2, die3, die4, die5, die6}

    scoringZone = getObjectFromGUID(scoringZone_GUID)
    drawZone = getObjectFromGUID(drawZone_GUID)
    discardZone = getObjectFromGUID(discardZone_GUID)
    rollingZone = getObjectFromGUID(rollingZone_GUID)

    Turns.enable = true
    Turns.disable_interactations = true
    Turns.pass_turns = false

    deck = findDeckInZone(drawZone)
    deck.shuffle()

    ones = {}
    twos = {}
    threes = {}
    fours = {}
    fives = {}
    sixes = {}

    fillCount = 0
    scoredDiceCounter = 0

    scoredDice = {}

    turnScore = 0
    score = {}

    score[1] = 0
    score[2] = 0
    score[3] = 0
    score[4] = 0
    score[5] = 0
    score[6] = 0

    scoringEnabled = true
    movingEnabled = true
    broadcastMustBustDebouncer = true
    broadcastturnScoreDebouncer = true

    colorIndex = {"White", "Red", "Yellow", "Green", "Blue", "Pink"}
    currentPlayer = 1
end

function onUpdate()
    findHighScorePlayer()

    UI.setValue("turnScoreUI", "Turn Score: "..turnScore)
    UI.setValue("player1score", "White's Total Score: "..score[1])
    UI.setValue("player2score", "Red's Total Score: "..score[2])
    UI.setValue("player3score", "Yellow's Total Score: "..score[3])
    UI.setValue("player4score", "Green's Total Score: "..score[4])
    UI.setValue("player5score", "Blue's Total Score: "..score[5])
    UI.setValue("player6score", "Pink's Total Score: "..score[6])
end

function onObjectRandomize(object, player_color)
    if object.tag == "Dice" then
        clearDiceTables()
        Wait.condition(
            function() return sortDie(object) end,
            function() return allDiceResting() end
        )
    end
end

function onObjectDrop(player_color, dropped_object)
    if dropped_object.tag == "Card" then
        card = dropped_object

        block.clearButtons()
        combinedButton_parameters.click_function = 'rollDiceButton'
        combinedButton_parameters.label = 'Roll Dice'
        block.createButton(combinedButton_parameters)

        checkNoDice()
        checkVengeance2500()
    end
end

function onPlayerTurnStart(player_color_start, player_color_previous)
    setCurrentPlayer(player_color_start)
    block.clearButtons()
    combinedButton_parameters.click_function = 'drawButton'
    combinedButton_parameters.label = 'Draw Card'
    block.createButton(combinedButton_parameters)
end

function onPlayerTurnEnd(player_color_end, player_color_next)
    if score[currentPlayer] ~= nil then
        score[currentPlayer] = score[currentPlayer] + turnScore
    end
    for i=1, 6 do
        dice[i].setLock(false)
        dice[i].setPosition({-3.5 + i, 0, 0})
    end
    clearDiceTables()
    turnScore = 0
    scoredDiceCounter = 0
    checker.clearButtons()
end
--END GLOBAL API EVENT SECTION--

--START BUTTON SECTION--
function drawButton()
    scoredDiceCounter = 0
    checker.clearButtons()
    local deck = findDeckInZone(drawZone)
    if deck == nil then
        card = findCardInZone(drawZone)
        local discardDeck = findDeckInZone(discardZone)
        discardDeck.setPosition(drawZone.getPosition())
        discardDeck.flip()
        discardDeck.shuffle()
    end
    if deck ~= nil then
        card = deck.takeObject()
    end

    local drop = discardZone.getPosition()
    drop["y"] = drop["y"] + 1

    card.setRotation({x=0 ,y=180, z=0})
    card.setPositionSmooth(drop)

    block.clearButtons()
    combinedButton_parameters.click_function = 'rollDiceButton'
    combinedButton_parameters.label = 'Roll Dice'
    block.createButton(combinedButton_parameters)

    checkNoDice()
    checkVengeance2500()
end

function rollDiceButton()
    if allDiceResting() == true then

        checker.clearButtons()
        clearDiceTables()

        if findDiceInZone(rollingZone) == nil then
            for i, die in ipairs(findDiceInZone(scoringZone)) do
                die.setLock(false)
                die.setPosition({-3.5 + i, 0, 0})
            end
            Wait.condition(
                function() return rollDice() end,
                function() return allDiceResting() end
            )
            return
        end

        rollDice()
    end
end

function rollDice()
    for i, die in ipairs(findDiceInZone(rollingZone)) do
        die.roll()
        Wait.condition(
            function() return sortDie(die) end,
            function() return allDiceResting() end
        )
    end
end

function createTakeThePointsButton()
    checker.clearButtons()
    continueTurnButton_parameters.click_function = 'endTurn'
    continueTurnButton_parameters.label = 'Take the Points \n & \n End the Turn'
    checker.createButton(continueTurnButton_parameters)
end

function createEndTurnButton()
    checker.clearButtons()
    continueTurnButton_parameters.click_function = 'endTurn'
    continueTurnButton_parameters.label = 'End Turn'
    checker.createButton(continueTurnButton_parameters)
end

function createTakeAChanceButton()
        block.clearButtons()
        combinedButton_parameters.click_function = 'drawButton'
        combinedButton_parameters.label = 'Take a Chance \n & \n Draw a Card'
        block.createButton(combinedButton_parameters)
end

function createDrawButton()
        block.clearButtons()
        combinedButton_parameters.click_function = 'drawButton'
        combinedButton_parameters.label = 'Draw Card'
        block.createButton(combinedButton_parameters)
end

function continueTurnButton()
    for i=1, 6 do
        dice[i].setLock(false)
        dice[i].setPosition({-3.5 + i, 0, 0})
    end
    clearDiceTables()
    scoredDiceCounter = 0
    if card.getName() ~= "Must Bust" then
        drawButton()
    end
    checker.clearButtons()
end
--END BUTTON SECTION--

function setCurrentPlayer(player_color)
    if player_color == "White" then
        currentPlayer = 1
    end
    if player_color == "Red" then
        currentPlayer = 2
    end
    if player_color == "Yellow" then
        currentPlayer = 3
    end
    if player_color == "Green" then
        currentPlayer = 4
    end
    if player_color == "Blue" then
        currentPlayer = 5
    end
    if player_color == "Pink" then
        currentPlayer = 6
    end
end

function endTurn()
    Turns.turn_color = Turns.getNextTurnColor()
end

function checkNoDice()
    if card.getName() == "No Dice" then
        noDiceMessage = "NO DICE!"
        broadcastToAll(noDiceMessage, colorIndex[currentPlayer])
        turnScore = 0
        endTurn()
    end
end

function checkVengeance2500()
    if card.getName() == "Vengeance 2500" then
        if currentPlayer == highScorePlayer then
            Wait.time(drawButton, 2)
            skipVengeanceMessage = "Skipped Vengeance 2500"
            broadcastToAll(skipVengeanceMessage, colorIndex[currentPlayer])
            return
        end
        checker.clearButtons()
        continueTurnButton_parameters.click_function = 'drawButton'
        continueTurnButton_parameters.label = 'Optional \n Draw another Card'
        checker.createButton(continueTurnButton_parameters)
    end
end

function clearDiceTables()
    for i in pairs (ones) do
        if i ~= nil then
            ones[i] = nil
        end
    end
    for i in pairs (twos) do
        if i ~= nil then
            twos[i] = nil
        end
    end
    for i in pairs (threes) do
        if i ~= nil then
            threes[i] = nil
        end
    end
    for i in pairs (fours) do
        if i ~= nil then
            fours[i] = nil
        end
    end
    for i in pairs (fives) do
        if i ~= nil then
            fives[i] = nil
        end
    end
    for i in pairs (sixes) do
        if i ~= nil then
            sixes[i] = nil
        end
    end
    for i in pairs (scoredDice) do
        if i ~= nil then
            scoredDice[i] = nil
        end
    end
end

function sortDie(die)
    local value = die.getValue()
    if value == 1 then
        table.insert(ones, die.getGUID())
    end
    if value == 2 then
        table.insert(twos, die.getGUID())
    end
    if value == 3 then
        table.insert(threes, die.getGUID())
    end
    if value == 4 then
        table.insert(fours, die.getGUID())
    end
    if value == 5 then
        table.insert(fives, die.getGUID())
    end
    if value == 6 then
        table.insert(sixes, die.getGUID())
    end

    Wait.time(scoreDice, 0.5)
    Wait.time(moveScoredDice, 0.5)
end

function scoreDice()

    if scoringEnabled ~= true then
        return
    end

    scoringEnabled = false

    if #ones == 1 then
        if #twos == 1 then
            if #threes == 1 then
                if #fours == 1 then
                    if #fives == 1 then
                        if #sixes == 1 then
                            turnScore = turnScore + 1500
                            table.insert(scoredDice, ones[1])
                            table.insert(scoredDice, twos[1])
                            table.insert(scoredDice, threes[1])
                            table.insert(scoredDice, fours[1])
                            table.insert(scoredDice, fives[1])
                            table.insert(scoredDice, sixes[1])
                            straightMessage = "STRAIGHT!"
                            broadcastToAll(straightMessage, colorIndex[currentPlayer])
                            Wait.time(enableScoring, 3)
                            return
                        end
                    end
                end
            end
        end
    end

    if #ones == 6 then
        turnScore = turnScore + 2000
        for i=1, 6 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 5 then
        turnScore = turnScore + 1200
        for i=1, 5 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 4 then
        turnScore = turnScore + 1100
        for i=1, 4 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 3 then
        turnScore = turnScore + 1000
        for i=1, 3 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 2 then
        turnScore = turnScore + 200
        for i=1, 2 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 1 then
        turnScore = turnScore + 100
        for i=1, 1 do
            table.insert(scoredDice, ones[i])
        end
    end

    if #twos == 6 then
        turnScore = turnScore + 400
        for i=1, 6 do
            table.insert(scoredDice, twos[i])
        end
    end
    if #twos >= 3 and #twos < 6 then
        turnScore = turnScore + 200
        for i=1, 3 do
            table.insert(scoredDice, twos[i])
        end
    end

    if #threes == 6 then
        turnScore = turnScore + 600
        for i=1, 6 do
            table.insert(scoredDice, threes[i])
        end
    end
    if #threes >= 3 and #threes < 6 then
        turnScore = turnScore + 300
        for i=1, 3 do
            table.insert(scoredDice, threes[i])
        end
    end

    if #fours == 6 then
        turnScore = turnScore + 800
        for i=1, 6 do
            table.insert(scoredDice, fours[i])
        end
    end
    if #fours >= 3 and #fours < 6 then
        turnScore = turnScore + 400
        for i=1, 3 do
            table.insert(scoredDice, fours[i])
        end
    end

    if #fives == 6 then
        turnScore = turnScore + 1000
        for i=1, 6 do
            table.insert(scoredDice, fives[i])
        end
    end
    if fives == 5 then
        turnScore = turnScore + 600
        for i=1, 5 do
            table.insert(scoredDice, fives[i])
        end
    end
    if fives == 4 then
        turnScore = turnScore + 550
        for i=1, 4 do
            table.insert(scoredDice, fives[i])
        end
    end
    if #fives == 3 then
        turnScore = turnScore + 500
        for i=1, 3 do
            table.insert(scoredDice, fives[i])
        end
    end
    if #fives == 2 then
        turnScore = turnScore + 100
        for i=1, 2 do
            table.insert(scoredDice, fives[i])
        end
    end
    if #fives == 1 then
        turnScore = turnScore + 50
        for i=1, 1 do
            table.insert(scoredDice, fives[i])
        end
    end

    if #sixes == 6 then
        turnScore = turnScore + 1200
        for i=1, 6 do
            table.insert(scoredDice, sixes[i])
        end
    end
    if #sixes >= 3 and #sixes < 6 then
        turnScore = turnScore + 600
        for i=1, 3 do
            table.insert(scoredDice, sixes[i])
        end
    end

    checkBust()

    if card.getName() ~= "Fill 1000" then
        if card.getName() ~= "Must Bust" then
            if card.getName() ~= "Double Trouble" then
                if card.getName() ~= "Vengeance 2500" then
                    createTakeThePointsButton()
                end
            end
        end
    end

    if card.getName() ~= "Must Bust" then
        broadcastturnScore()
    end

    Wait.time(enableScoring, 3)
end

function enableScoring()
    scoringEnabled = true
end

function broadcastturnScore()
    if broadcastturnScoreDebouncer ~= true then
        return
    end

    broadcastturnScoreDebouncer = false

    turnScoreMessage = colorIndex[currentPlayer].." Turn Score: "..turnScore
    broadcastToAll(turnScoreMessage, colorIndex[currentPlayer])

    Wait.time(enableBroadcastturnScoreDebouncer, 3)
end

function enableBroadcastturnScoreDebouncer()
    broadcastturnScoreDebouncer = true
end

function checkBust()
    if #scoredDice == 0 then
        if card.getName() ~= nil then
            if card.getName() == "Must Bust" then
                broadcastMustBust()
                enableScoring()

                Wait.time(endTurn, 1)
                fillCount = 0
                return
            end
        end
        bustMessage = "BUST!"
        broadcastToAll(bustMessage, colorIndex[currentPlayer])
        turnScore = 0
        scoredDiceCounter = 0
        fillCount = 0

        endTurn()
        Wait.time(enableScoring, 3)
        return
    end
end

function broadcastMustBust()
    if broadcastMustBustDebouncer ~= true then
        return
    end

    broadcastMustBustDebouncer = false

    mustBustMessage = "BUSTED! \n"..turnScore.." added to Score"
    broadcastToAll(mustBustMessage, colorIndex[currentPlayer])

    Wait.time(enableMustBustBroadcast, 3)
end

function enableMustBustBroadcast()
    broadcastMustBustDebouncer = true
end

function checkFill()
    if scoredDiceCounter == 6 then
        if card.getName() ~= nil then
            fillCount = fillCount + 1

            if card.getName() == "Bonus 300" then
                turnScore = turnScore + 300
                bonus300Message = "Bonus 300 Awarded!"
                broadcastToAll(bonus300Message, colorIndex[currentPlayer])
                fillCount = 0
            end
            if card.getName() == "Bonus 400" then
                turnScore = turnScore + 400
                bonus400Message = "Bonus 400 Awarded!"
                broadcastToAll(bonus400Message, colorIndex[currentPlayer])
                fillCount = 0
            end
            if card.getName() == "Bonus 500" then
                turnScore = turnScore + 500
                bonus500Message = "Bonus 500 Awarded!"
                broadcastToAll(bonus500Message, colorIndex[currentPlayer])
                fillCount = 0
            end
            if card.getName() == "Fill 1000" then
                turnScore = turnScore + 1000
                fill1000Message = "Fill 1000 Awarded!"
                broadcastToAll(fill1000Message, colorIndex[currentPlayer])
                fillCount = 0
            end
            if card.getName() == "Double Trouble" then
                if fillCount == 2 then
                    turnScore = turnScore * 2
                    score[currentPlayer] = score[currentPlayer] + turnScore
                    turnScore = 0

                    doubleTroubleMessage = "Double Trouble Awarded! \n"..turnScore.." added to Score"
                    broadcastToAll(doubleTroubleMessage, colorIndex[currentPlayer])

                    createEndTurnButton()
                    createDrawButtion()

                    fillCount = 0
                end
            end
            if card.getName() == "Vengeance 2500" then
                findHighScorePlayer()
                score[highScorePlayer] = score[highScorePlayer] - 2500

                score[currentPlayer] = score[currentPlayer] + turnScore

                vengeanceMessage = "Vengeance 2500! Subtracted 2500 from the Leader's Score \n"..turnScore.." added to "..colorIndex[currentPlayer].." Player's Score"
                broadcastToAll(vengeanceMessage, colorIndex[currentPlayer])

                turnScore = 0
                fillCount = 0
            end

            --After filling create buttons to continue
            --Excludes Must Bust and Double Trouble
            if card.getName() ~= "Must Bust" then
                if card.getName() ~= "Double Trouble" then
                    createTakeThePointsButton()
                    createTakeAChanceButton()
                end
            end

            fillMessage = "Turn Score Subtotal: "..turnScore
            broadcastToAll(fillMessage, colorIndex[currentPlayer])

            scoredDiceCounter = 0
        end
    end
end

function moveScoredDie()
    local length = #scoredDice
    if scoredDice[length] ~= nil then
        local die = getObjectFromGUID(scoredDice[length])


        local scoringZonePosition = scoringZone.getPosition()
        scoringZonePosition["x"] = scoringZonePosition["x"] - 3.75
        die.setLock(true)
        die.setPositionSmooth(scoringZonePosition, false, false)

        if length >= 1 then
            translateScoringDice()
            table.remove(scoredDice, length)
        end
    end
end

function moveScoredDice()
    if movingEnabled ~= true then
        return
    end

    movingEnabled = false

    for i=1, #scoredDice do
        Wait.time(moveScoredDie, i - 0.75)
        scoredDiceCounter = scoredDiceCounter + 1
        checkFill()
    end
    Wait.time(enableMoving, 3)
end

function enableMoving()
    movingEnabled = true
end

function translateScoringDice()
    local scoringDice = findDiceInZone(scoringZone)
    if scoringDice ~= nil then
        for i, object in ipairs(scoringDice) do
            if object ~= nil then
                object.translate({1.5, 0, 0})
            end
        end
    end
end

function checkResting(target)
    return target.resting
end

function allDiceResting()
    if checkResting(die1) and checkResting(die2) and checkResting(die3)
        and checkResting(die4) and checkResting(die5) and checkResting(die6) then
            return true
        end
    return false
end

function findDiceInZone(zone)
    local objectsInZone = zone.getObjects()
    local diceFound = {}
    for i, object in ipairs(objectsInZone) do
        if object.tag == "Dice" then
            table.insert(diceFound, object)
        end
    end
    if #diceFound > 0 then
        return diceFound
    else
        return nil
    end
end

function findDeckInZone(zone)
    local objectsInZone = zone.getObjects()
    for i, object in ipairs(objectsInZone) do
        if object.tag == "Deck" then
            return object
        end
    end
    return nil
end

function findCardInZone(zone)
    local objectsInZone = zone.getObjects()
    for i, object in ipairs(objectsInZone) do
        if object.tag == "Card" then
            return object
        end
    end
    return nil
end

function findHighScorePlayer()
    highScorePlayer = (max(score, function(a,b) return a < b end))
end

function max(t, fn)
    if #t == 0 then return nil, nil end
    local key, value = 1, t[1]
    for i = 2, #t do
        if fn(value, t[i]) then
            key, value = i, t[i]
        end
    end
    return key
end