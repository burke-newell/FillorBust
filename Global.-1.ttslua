
checker_GUID = 'b85973'

die1_GUID = '197209'
die2_GUID = '5e540b'
die3_GUID = 'a9545a'
die4_GUID = '4fd345'
die5_GUID = 'ad5a9d'
die6_GUID = 'd04b38'

scoringZone_GUID = '9c0582'

button_parameters = {}
button_parameters.click_function = 'resetDice'
button_parameters.function_owner = nil
button_parameters.label = 'Reset Dice \n & Score'
button_parameters.position = {0,0.8,0}
button_parameters.rotation = {0,0,0}
button_parameters.width = 500
button_parameters.height = 500
button_parameters.font_size = 100

function onLoad()
    checker = getObjectFromGUID(checker_GUID)
    checker.createButton(button_parameters)

    die1 = getObjectFromGUID(die1_GUID)
    die2 = getObjectFromGUID(die2_GUID)
    die3 = getObjectFromGUID(die3_GUID)
    die4 = getObjectFromGUID(die4_GUID)
    die5 = getObjectFromGUID(die5_GUID)
    die6 = getObjectFromGUID(die6_GUID)

    dice = {die1, die2, die3, die4, die5, die6}

    scoringZone = getObjectFromGUID(scoringZone_GUID)

end

function onObjectRandomize(object, player_color)
    if object.tag == "Dice" then
        clearDiceTables()
        Wait.condition(
            function() return sortDie(object) end,
            function() return allDiceResting() end
        )
    end
end
--[[
function onObjectLeaveContainer(container, leave_object)
    if container.tag == "Deck" then
        print(leave_object.getName())
    end
end
]]--

--parameter are incorrectly reversed in documentation
function onObjectDrop(player_color, dropped_object)
    if dropped_object.tag == "Card" then
        card = dropped_object
        card.flip()
        if card.getName() == "No Dice" then
            print("NO DICE!")
        end
    end
end

ones = {}
twos = {}
threes = {}
fours = {}
fives = {}
sixes = {}

scoredDice = {}

score = 0

scoringEnabled = true
movingEnabled = true

function clearDiceTables()
    for i in pairs (ones) do
        if i ~= nil then
            ones[i] = nil
        end
    end
    for i in pairs (twos) do
        if i ~= nil then
            twos[i] = nil
        end
    end
    for i in pairs (threes) do
        if i ~= nil then
            threes[i] = nil
        end
    end
    for i in pairs (fours) do
        if i ~= nil then
            fours[i] = nil
        end
    end
    for i in pairs (fives) do
        if i ~= nil then
            fives[i] = nil
        end
    end
    for i in pairs (sixes) do
        if i ~= nil then
            sixes[i] = nil
        end
    end
    for i in pairs (scoredDice) do
        if i ~= nil then
            scoredDice[i] = nil
        end
    end
end

function sortDie(die)
    local value = die.getValue()
    if value == 1 then
        table.insert(ones, die.getGUID())
    end
    if value == 2 then
        table.insert(twos, die.getGUID())
    end
    if value == 3 then
        table.insert(threes, die.getGUID())
    end
    if value == 4 then
        table.insert(fours, die.getGUID())
    end
    if value == 5 then
        table.insert(fives, die.getGUID())
    end
    if value == 6 then
        table.insert(sixes, die.getGUID())
    end

    Wait.time(scoreDice, 0.5)
    Wait.time(moveScoredDice, 0.5)
end

function scoreDice()

    if scoringEnabled ~= true then
        return
    end

    scoringEnabled = false

    if #ones == 6 then
        score = score + 2000
        for i=1, 6 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 5 then
        score = score + 1200
        for i=1, 5 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 4 then
        score = score + 1100
        for i=1, 4 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 3 then
        score = score + 1000
        for i=1, 3 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 2 then
        score = score + 200
        for i=1, 2 do
            table.insert(scoredDice, ones[i])
        end
    end
    if #ones == 1 then
        score = score + 100
        for i=1, 1 do
            table.insert(scoredDice, ones[i])
        end
    end

    if #twos == 6 then
        score = score + 400
        for i=1, 6 do
            table.insert(scoredDice, twos[i])
        end
    end
    if #twos >= 3 and #twos < 6 then
        score = score + 200
        for i=1, 3 do
            table.insert(scoredDice, twos[i])
        end
    end

    if #threes == 6 then
        score = score + 600
        for i=1, 6 do
            table.insert(scoredDice, threes[i])
        end
    end
    if #threes >= 3 and #threes < 6 then
        score = score + 300
        for i=1, 3 do
            table.insert(scoredDice, threes[i])
        end
    end

    if #fours == 6 then
        score = score + 800
        for i=1, 6 do
            table.insert(scoredDice, fours[i])
        end
    end
    if #fours >= 3 and #fours < 6 then
        score = score + 400
        for i=1, 3 do
            table.insert(scoredDice, fours[i])
        end
    end

    if #fives == 6 then
        score = score + 1000
        for i=1, 6 do
            table.insert(scoredDice, fives[i])
        end
    end
    if fives == 5 then
        score = score + 600
        for i=1, 5 do
            table.insert(scoredDice, fives[i])
        end
    end
    if fives == 4 then
        score = score + 550
        for i=1, 4 do
            table.insert(scoredDice, fives[i])
        end
    end
    if #fives == 3 then
        score = score + 500
        for i=1, 3 do
            table.insert(scoredDice, fives[i])
        end
    end
    if #fives == 2 then
        score = score + 100
        for i=1, 2 do
            table.insert(scoredDice, fives[i])
        end
    end
    if #fives == 1 then
        score = score + 50
        for i=1, 1 do
            table.insert(scoredDice, fives[i])
        end
    end

    if #sixes == 6 then
        score = score + 1200
        for i=1, 6 do
            table.insert(scoredDice, sixes[i])
        end
    end
    if #sixes >= 3 and #sixes < 6 then
        score = score + 600
        for i=1, 3 do
            table.insert(scoredDice, sixes[i])
        end
    end

    if #scoredDice == 0 then
        print("BUST!")
        score = 0
    end


    printValues()
    Wait.time(enableScoring, 3)
end

function enableScoring()
    scoringEnabled = true
end

function printValues()
    --[[
    print(#ones, " ones")
    print(#twos, " twos")
    print(#threes, " threes")
    print(#fours, " fours")
    print(#fives, " fives")
    print(#sixes, " sixes")
    ]]--
    print("Score: ", score)
    --print("Scored Dice: ", #scoredDice)
    print("\n")
end


function checkFill()
    if findDiceInZone(scoringZone) ~= nil then
        local scoringDice = findDiceInZone(scoringZone)
        if #scoringDice == 6 then
            print("FILL!")

            if card.getName() == "Bonus 300" then
                score = score + 300
                print("Bonus 300 Awarded! \nScore: ", score)
            end
            if card.getName() == "Bonus 400" then
                score = score + 400
                print("Bonus 400 Awarded! \nScore: ", score)
            end
            if card.getName() == "Bonus 500" then
                score = score + 500
                print("Bonus 500 Awarded! \nScore: ", score)
            end
            if card.getName() == "Fill 1000" then
                score = score + 1000
                print("Fill 1000 Awarded! \nScore: ", score)
            end
            if card.getName() == "Double Trouble" then
                fillCount = fillCount + 1
                if fillCount == 2 then
                    score = score * 2
                    print("Double Trouble Awarded! \nScore: ", score)
                    fillCount = 0
                end
            end
            if card.getName() == "Vengeance 2500" then
                highestScore = highestScore - 2500
            end
        end
    end
end

function moveScoredDie()
    local length = #scoredDice
    if scoredDice[length] ~= nil then
        local die = getObjectFromGUID(scoredDice[length])


        local scoringZonePosition = scoringZone.getPosition()
        scoringZonePosition["x"] = scoringZonePosition["x"] - 3.75
        die.setLock(true)
        die.setPositionSmooth(scoringZonePosition, false, false)

        if length >= 1 then
            translateScoringDice()
            table.remove(scoredDice, length)
        end
    end
end

function moveScoredDice()

    if movingEnabled ~= true then
        return
    end

    movingEnabled = false

    for i=1, #scoredDice do
        Wait.time(moveScoredDie, i - 0.75)
    end
    Wait.time(enableMoving, 3)
    Wait.time(checkFill, 3)
end

function enableMoving()
    movingEnabled = true
end

function translateScoringDice()
    local scoringDice = findDiceInZone(scoringZone)
    if scoringDice ~= nil then
        for i, object in ipairs(scoringDice) do
            if object ~= nil then
                object.translate({1.5, 0, 0})
            end
        end
    end
end

function checkResting(target)
    return target.resting
end

function allDiceResting()
    if checkResting(die1) and checkResting(die2) and checkResting(die3)
        and checkResting(die4) and checkResting(die5) and checkResting(die6) then
            return true
        end
    return false
end

function findDiceInZone(zone)
    local objectsInZone = zone.getObjects()
    local diceFound = {}
    for i, object in ipairs(objectsInZone) do
        if object.tag == "Dice" then
            table.insert(diceFound, object)
        end
    end
    if #diceFound > 0 then
        return diceFound
    else
        return nil
    end
end

function resetDice()
    for i=1, 6 do
        dice[i].setLock(false)
        dice[i].setPosition({-3.5 + i, 0, 0})
    end
    clearDiceTables()
    score = 0
end

function sortDice()
    unsortedDice = {}
    for i=1, 6 do
        table.insert(unsortedDice, dice[i].getValue())
    end
    sortedDice = table.sort(unsortedDice)
    print(table.concat(sortedDice, ", "))
end

function scoreStraight()
    if sortedDice[1] == 1 and sortedDice[2] == 2 and sortedDice[3] == 3
        and sortedDice[4] == 4 and sortedDice[5] == 5 and sortedDice[6] == 6 then
            score = 1500
            print(score)
        end
end