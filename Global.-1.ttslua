checker1_GUID = 'a8c36b'
checker2_GUID = '6d6e51'
checker3_GUID = '420478'
checker4_GUID = 'b85973'

deck_GUID = 'ad183d'

die1_GUID = '197209'
die2_GUID = '5e540b'
die3_GUID = 'a9545a'
die4_GUID = '4fd345'
die5_GUID = 'ad5a9d'
die6_GUID = 'd04b38'

scoringZone_GUID = '9c0582'

button1_parameters = {}
button1_parameters.click_function = 'moveScoringOnes'
button1_parameters.function_owner = nil
button1_parameters.label = 'Move Scoring Ones'
button1_parameters.position = {0,0.8,0}
button1_parameters.rotation = {0,0,0}
button1_parameters.width = 1000
button1_parameters.height = 500
button1_parameters.font_size = 100

button2_parameters = {}
button2_parameters.click_function = 'printValues'
button2_parameters.function_owner = nil
button2_parameters.label = 'Score Dice \n Print Values'
button2_parameters.position = {0,0.8,0}
button2_parameters.rotation = {0,0,0}
button2_parameters.width = 1000
button2_parameters.height = 500
button2_parameters.font_size = 100

button3_parameters = {}
button3_parameters.click_function = 'moveScoringDice'
button3_parameters.function_owner = nil
button3_parameters.label = 'Move Scoring Dice'
button3_parameters.position = {0,0.8,0}
button3_parameters.rotation = {0,0,0}
button3_parameters.width = 1000
button3_parameters.height = 500
button3_parameters.font_size = 100

button4_parameters = {}
button4_parameters.click_function = 'resetDice'
button4_parameters.function_owner = nil
button4_parameters.label = 'Reset Dice'
button4_parameters.position = {0,0.8,0}
button4_parameters.rotation = {0,0,0}
button4_parameters.width = 500
button4_parameters.height = 500
button4_parameters.font_size = 100

function onLoad()
    checker1 = getObjectFromGUID(checker1_GUID)
    checker2 = getObjectFromGUID(checker2_GUID)
    checker3 = getObjectFromGUID(checker3_GUID)
    checker4 = getObjectFromGUID(checker4_GUID)

    deck = getObjectFromGUID(deck_GUID)

    scoringZone = getObjectFromGUID(scoringZone_GUID)

    die1 = getObjectFromGUID(die1_GUID)
    die2 = getObjectFromGUID(die2_GUID)
    die3 = getObjectFromGUID(die3_GUID)
    die4 = getObjectFromGUID(die4_GUID)
    die5 = getObjectFromGUID(die5_GUID)
    die6 = getObjectFromGUID(die6_GUID)

    dice = {die1, die2, die3, die4, die5, die6}

    checker1.createButton(button1_parameters)
    checker2.createButton(button2_parameters)
    checker3.createButton(button3_parameters)
    checker4.createButton(button4_parameters)

end

function onObjectRandomize(die1, player_color)
    clearScoringDice()
    Wait.condition(
        function() return sortDie(die1) end,
        function() return allDiceResting() end
    )
end

function onObjectRandomize(die2, player_color)
    clearScoringDice()
    Wait.condition(
        function() return sortDie(die2) end,
        function() return allDiceResting() end
    )
end

function onObjectRandomize(die3, player_color)
    clearScoringDice()
    Wait.condition(
        function() return sortDie(die3) end,
        function() return allDiceResting() end
    )
end

function onObjectRandomize(die4, player_color)
    clearScoringDice()
    Wait.condition(
        function() return sortDie(die4) end,
        function() return allDiceResting() end
    )
end

function onObjectRandomize(die5, player_color)
    clearScoringDice()
    Wait.condition(
        function() return sortDie(die5) end,
        function() return allDiceResting() end
    )
end

function onObjectRandomize(die6, player_color)
    clearScoringDice()
    Wait.condition(
        function() return sortDie(die6) end,
        function() return allDiceResting() end
    )
end

--[[
function onObjectEnterScriptingZone(scoringZone, enter_object)
    local position = enter_object.getPosition()
    position["x"] = position["x"] + 1.5
    enter_object.setPositionSmooth(position, true, false)
end
]]--



function checkTriples()
    if die1.getValue() == die2.getValue() and die3.getValue() then
        print("match")
    end
end

scoringDice = {}
ones = {}
twos = {}
threes = {}
fours = {}
fives = {}
sixes = {}

score = 0


function clearScoringDice()
    for i in pairs (scoringDice) do
        if i ~= nil then
            scoringDice[i] = nil
        end
    end
    for i in pairs (ones) do
        if i ~= nil then
            ones[i] = nil
        end
    end
    for i in pairs (twos) do
        if i ~= nil then
            twos[i] = nil
        end
    end
    for i in pairs (threes) do
        if i ~= nil then
            threes[i] = nil
        end
    end
    for i in pairs (fours) do
        if i ~= nil then
            fours[i] = nil
        end
    end
    for i in pairs (fives) do
        if i ~= nil then
            fives[i] = nil
        end
    end
    for i in pairs (sixes) do
        if i ~= nil then
            sixes[i] = nil
        end
    end
end

function sortDie(die)
    local value = die.getValue()
    if value == 1 then
        table.insert(ones, die.getGUID())
    end
    if value == 2 then
        table.insert(twos, die.getGUID())
    end
    if value == 3 then
        table.insert(threes, die.getGUID())
    end
    if value == 4 then
        table.insert(fours, die.getGUID())
    end
    if value == 5 then
        table.insert(fives, die.getGUID())
    end
    if value == 6 then
        table.insert(sixes, die.getGUID())
    end
end

function scoreDice()
    if #ones == 6 then
        score = score + 2000
    end
    if #ones == 5 then
        score = score + 1200
    end
    if #ones == 4 then
        score = score + 1100
    end
    if #ones == 3 then
        score = score + 1000
    end
    if #ones < 3 then
        score = score + #ones * 100
    end

    if #twos == 6 then
        score = score + 400
    end
    if #twos >= 3 and #twos < 6 then
        score = score + 200
    end

    if #threes == 6 then
        score = score + 600
    end
    if #threes >= 3 and #threes < 6 then
        score = score + 300
    end

    if #fours == 6 then
        score = score + 800
    end
    if #fours >= 3 and #fours < 6 then
        score = score + 400
    end

    if #fives == 6 then
        score = score + 1000
    end
    if fives == 5 then
        score = score + 600
    end
    if fives == 4 then
        score = score + 550
    end
    if #fives == 3 then
        score = score + 500
    end
    if #fives < 3 then
        score = score + #fives * 50
    end

    if #sixes == 6 then
        score = score + 1200
    end
    if #sixes >= 3 and #sixes < 6 then
        score = score + 600
    end
end

function printValues()
    scoreDice()
    print(#ones, " ones")
    print(#twos, " twos")
    print(#threes, " threes")
    print(#fours, " fours")
    print(#fives, " fives")
    print(#sixes, " sixes")
    print("Score: ", score)
    print("\n")
end


function checkFill()
    if findDiceInZone(scoringZone) ~= nil then
        local scoringDice = findDiceInZone(scoringZone)
        if #scoringDice == 6 then
            print("Fill!")
        end
    end
end

function moveScoringOnes()
    local length = #ones
    if ones[length] ~= nil then
        die = getObjectFromGUID(ones[length])


        local scoringZonePosition = scoringZone.getPosition()
        scoringZonePosition["x"] = scoringZonePosition["x"] - 3.75
        die.setLock(true)
        die.setPositionSmooth(scoringZonePosition, true, false)

        if length >= 1 then
            translateScoringDice()
            table.remove(ones, length)
        end
    end
end
--[[
function moveScoringTwos()
    local length = #twos
    if twos[length] ~= nil then
        die = getObjectFromGUID(twos[length])


        local scoringZonePosition = scoringZone.getPosition()
        scoringZonePosition["x"] = scoringZonePosition["x"] - 3.75
        die.setLock(true)
        die.setPositionSmooth(scoringZonePosition, true, false)

        if length >= 1 then
            translateScoringDice()
            table.remove(twos, length)
        end
    end
end

function moveScoringThrees()
    local length = #threes
    if threes[length] ~= nil then
        die = getObjectFromGUID(threes[length])


        local scoringZonePosition = scoringZone.getPosition()
        scoringZonePosition["x"] = scoringZonePosition["x"] - 3.75
        die.setLock(true)
        die.setPositionSmooth(scoringZonePosition, true, false)

        if length >= 1 then
            translateScoringDice()
            table.remove(threes, length)
        end
    end
end

function moveScoringFours()
    local length = #fours
    if fours[length] ~= nil then
        die = getObjectFromGUID(fours[length])


        local scoringZonePosition = scoringZone.getPosition()
        scoringZonePosition["x"] = scoringZonePosition["x"] - 3.75
        die.setLock(true)
        die.setPositionSmooth(scoringZonePosition, true, false)

        if length >= 1 then
            translateScoringDice()
            table.remove(fours, length)
        end
    end
end
]]--
function moveScoringFives()
    local length = #fives
    if fives[length] ~= nil then
        die = getObjectFromGUID(fives[length])


        local scoringZonePosition = scoringZone.getPosition()
        scoringZonePosition["x"] = scoringZonePosition["x"] - 3.75
        die.setLock(true)
        die.setPositionSmooth(scoringZonePosition, true, false)

        if length >= 1 then
            translateScoringDice()
            table.remove(fives, length)
        end
    end
end
--[[
function moveScoringSixes()
    local length = #sixes
    if sixes[length] ~= nil then
        die = getObjectFromGUID(sixes[length])


        local scoringZonePosition = scoringZone.getPosition()
        scoringZonePosition["x"] = scoringZonePosition["x"] - 3.75
        die.setLock(true)
        die.setPositionSmooth(scoringZonePosition, true, false)

        if length >= 1 then
            translateScoringDice()
            table.remove(sixes, length)
        end
    end
end
]]--
function moveScoringDice()
    for i=1, #ones do
        Wait.time(moveScoringOnes, i - 0.75)
    end
    --Wait.time(moveScoringTwos, 0.1)
    --Wait.time(moveScoringThrees, 0.2)
    --Wait.time(moveScoringFours, 0.3)
    for i=1, #fives do
        Wait.time(moveScoringFives, i - 0.5)
    end
    --Wait.time(moveScoringSixes, 0.5)
end

function moveScoringDie(die)
    scoringZonePosition = scoringZone.getPosition()
    scoringZonePosition["x"] = scoringZonePosition["x"] - 3.75
    die.setLock(true)
    die.setPositionSmooth(scoringZonePosition, true, false)
end

function translateScoringDice()
    local scoringDice = findDiceInZone(scoringZone)
    if scoringDice ~= nil then
        for i, object in ipairs(scoringDice) do
            if object ~= nil then
                object.translate({1.5, 0, 0})
            end
        end
    end
end

function checkResting(target)
    return target.resting
end

function allDiceResting()
    if checkResting(die1) and checkResting(die2) and checkResting(die3)
        and checkResting(die4) and checkResting(die5) and checkResting(die6) then
            return true
        end
    return false
end

function findDiceInZone(zone)
    local objectsInZone = zone.getObjects()
    local diceFound = {}
    for i, object in ipairs(objectsInZone) do
        if object.tag == "Dice" then
            table.insert(diceFound, object)
        end
    end
    if #diceFound > 0 then
        return diceFound
    else
        return nil
    end
end

function resetDice()
    for i=1, 6 do
        dice[i].setLock(false)
        dice[i].setPosition({-3.5 + i, 0, 0})
    end
    clearScoringDice()
end

function sortDice()
    unsortedDice = {}
    for i=1, 6 do
        table.insert(unsortedDice, dice[i].getValue())
    end
    sortedDice = table.sort(unsortedDice)
    print(table.concat(sortedDice, ", "))
end

function scoreStraight()
    if sortedDice[1] == 1 and sortedDice[2] == 2 and sortedDice[3] == 3
        and sortedDice[4] == 4 and sortedDice[5] == 5 and sortedDice[6] == 6 then
            score = 1500
            print(score)
        end
end